Attribute VB_Name = "xlwings_udfs"
'Autogenerated code by xlwings - changes will be lost with next import!
#Const App = "Microsoft Excel" 'Adjust when using outside of Excel
Function xxJoin(range_, Optional sep)
Attribute xxJoin.VB_Description = "将选定范围内的文本用指定的分隔符连接起来"
Attribute xxJoin.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxJoin = Py.CallUDF("xudfs", "xxJoin", Array(range_, sep), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxJoin = Py.CallUDF("xudfs", "xxJoin", Array(range_, sep))
        Exit Function
    #End If
failed:
    xxJoin = Err.Description
End Function

Function xxRegexSplitH(text, pattern)
Attribute xxRegexSplitH.VB_Description = "用正则表达式分割字符串，结果横向显示"
Attribute xxRegexSplitH.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxRegexSplitH = Py.CallUDF("xudfs", "xxRegexSplitH", Array(text, pattern), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxRegexSplitH = Py.CallUDF("xudfs", "xxRegexSplitH", Array(text, pattern))
        Exit Function
    #End If
failed:
    xxRegexSplitH = Err.Description
End Function

Function xxRegexSplitV(text, pattern)
Attribute xxRegexSplitV.VB_Description = "用正则表达式分割字符串，结果纵向显示"
Attribute xxRegexSplitV.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxRegexSplitV = Py.CallUDF("xudfs", "xxRegexSplitV", Array(text, pattern), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxRegexSplitV = Py.CallUDF("xudfs", "xxRegexSplitV", Array(text, pattern))
        Exit Function
    #End If
failed:
    xxRegexSplitV = Err.Description
End Function

Function xxRegexSub(text, pattern, repl)
Attribute xxRegexSub.VB_Description = "替换某字符串匹配模式的部分为指定字符串"
Attribute xxRegexSub.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxRegexSub = Py.CallUDF("xudfs", "xxRegexSub", Array(text, pattern, repl), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxRegexSub = Py.CallUDF("xudfs", "xxRegexSub", Array(text, pattern, repl))
        Exit Function
    #End If
failed:
    xxRegexSub = Err.Description
End Function

Function xxSetDiffH(range1, range2)
Attribute xxSetDiffH.VB_Description = "以列的形式返回两个所选范围的差集"
Attribute xxSetDiffH.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetDiffH = Py.CallUDF("xudfs", "xxSetDiffH", Array(range1, range2), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetDiffH = Py.CallUDF("xudfs", "xxSetDiffH", Array(range1, range2))
        Exit Function
    #End If
failed:
    xxSetDiffH = Err.Description
End Function

Function xxSetDiffV(range1, range2)
Attribute xxSetDiffV.VB_Description = "以列的形式返回两个所选范围的差集"
Attribute xxSetDiffV.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetDiffV = Py.CallUDF("xudfs", "xxSetDiffV", Array(range1, range2), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetDiffV = Py.CallUDF("xudfs", "xxSetDiffV", Array(range1, range2))
        Exit Function
    #End If
failed:
    xxSetDiffV = Err.Description
End Function

Function xxSetIntersectH(range1, range2)
Attribute xxSetIntersectH.VB_Description = "以列的形式返回两个所选范围的交集"
Attribute xxSetIntersectH.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetIntersectH = Py.CallUDF("xudfs", "xxSetIntersectH", Array(range1, range2), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetIntersectH = Py.CallUDF("xudfs", "xxSetIntersectH", Array(range1, range2))
        Exit Function
    #End If
failed:
    xxSetIntersectH = Err.Description
End Function

Function xxSetIntersectV(range1, range2)
Attribute xxSetIntersectV.VB_Description = "以行的形式返回两个所选范围的交集"
Attribute xxSetIntersectV.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetIntersectV = Py.CallUDF("xudfs", "xxSetIntersectV", Array(range1, range2), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetIntersectV = Py.CallUDF("xudfs", "xxSetIntersectV", Array(range1, range2))
        Exit Function
    #End If
failed:
    xxSetIntersectV = Err.Description
End Function

Function xxSetIsDisjoint(range1, range2)
Attribute xxSetIsDisjoint.VB_Description = "报告两个集合是否没有交集"
Attribute xxSetIsDisjoint.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetIsDisjoint = Py.CallUDF("xudfs", "xxSetIsDisjoint", Array(range1, range2), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetIsDisjoint = Py.CallUDF("xudfs", "xxSetIsDisjoint", Array(range1, range2))
        Exit Function
    #End If
failed:
    xxSetIsDisjoint = Err.Description
End Function

Function xxSetIsSubset(range1, range2)
Attribute xxSetIsSubset.VB_Description = "报告第一个集合是否是第二个集合的子集"
Attribute xxSetIsSubset.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetIsSubset = Py.CallUDF("xudfs", "xxSetIsSubset", Array(range1, range2), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetIsSubset = Py.CallUDF("xudfs", "xxSetIsSubset", Array(range1, range2))
        Exit Function
    #End If
failed:
    xxSetIsSubset = Err.Description
End Function

Function xxSetIsSuperSet(range1, range2)
Attribute xxSetIsSuperSet.VB_Description = "报告第一个集合是否是第二个集合的超集"
Attribute xxSetIsSuperSet.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetIsSuperSet = Py.CallUDF("xudfs", "xxSetIsSuperSet", Array(range1, range2), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetIsSuperSet = Py.CallUDF("xudfs", "xxSetIsSuperSet", Array(range1, range2))
        Exit Function
    #End If
failed:
    xxSetIsSuperSet = Err.Description
End Function

Function xxSetSymDiffH(range1, range2)
Attribute xxSetSymDiffH.VB_Description = "以列的形式返回两个所选范围的对称差集"
Attribute xxSetSymDiffH.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetSymDiffH = Py.CallUDF("xudfs", "xxSetSymDiffH", Array(range1, range2), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetSymDiffH = Py.CallUDF("xudfs", "xxSetSymDiffH", Array(range1, range2))
        Exit Function
    #End If
failed:
    xxSetSymDiffH = Err.Description
End Function

Function xxSetSymDiffV(range1, range2)
Attribute xxSetSymDiffV.VB_Description = "以行的形式返回两个所选范围的对称差集"
Attribute xxSetSymDiffV.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetSymDiffV = Py.CallUDF("xudfs", "xxSetSymDiffV", Array(range1, range2), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetSymDiffV = Py.CallUDF("xudfs", "xxSetSymDiffV", Array(range1, range2))
        Exit Function
    #End If
failed:
    xxSetSymDiffV = Err.Description
End Function

Function xxSetUnionH(ParamArray ranges())
Attribute xxSetUnionH.VB_Description = "以列的形式返回所选ranges内所有唯一值的并集"
Attribute xxSetUnionH.VB_ProcData.VB_Invoke_Func = " \n22"
    Dim argsArray() As Variant
    argsArray = Array()
    ReDim Preserve argsArray(0 To UBound(ranges) - LBound(ranges) + 0)
    For k = LBound(ranges) To UBound(ranges)
    argsArray(0 + k - LBound(ranges)) = ranges(k)
    Next k
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetUnionH = Py.CallUDF("xudfs", "xxSetUnionH", argsArray, ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetUnionH = Py.CallUDF("xudfs", "xxSetUnionH", argsArray)
        Exit Function
    #End If
failed:
    xxSetUnionH = Err.Description
End Function

Function xxSetUnionV(ParamArray ranges())
Attribute xxSetUnionV.VB_Description = "以列的形式返回所选ranges内所有唯一值的并集"
Attribute xxSetUnionV.VB_ProcData.VB_Invoke_Func = " \n22"
    Dim argsArray() As Variant
    argsArray = Array()
    ReDim Preserve argsArray(0 To UBound(ranges) - LBound(ranges) + 0)
    For k = LBound(ranges) To UBound(ranges)
    argsArray(0 + k - LBound(ranges)) = ranges(k)
    Next k
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSetUnionV = Py.CallUDF("xudfs", "xxSetUnionV", argsArray, ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSetUnionV = Py.CallUDF("xudfs", "xxSetUnionV", argsArray)
        Exit Function
    #End If
failed:
    xxSetUnionV = Err.Description
End Function

Function xxSlice(text, Optional start_, Optional end_)
Attribute xxSlice.VB_Description = "返回起始范围内的子字串"
Attribute xxSlice.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxSlice = Py.CallUDF("xudfs", "xxSlice", Array(text, start_, end_), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxSlice = Py.CallUDF("xudfs", "xxSlice", Array(text, start_, end_))
        Exit Function
    #End If
failed:
    xxSlice = Err.Description
End Function

Function xxStrip(text, Optional pattern)
Attribute xxStrip.VB_Description = "修剪掉字符串首尾匹配指定模式的字符,默认去除首位全角和半角空格及换行"
Attribute xxStrip.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxStrip = Py.CallUDF("xudfs", "xxStrip", Array(text, pattern), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxStrip = Py.CallUDF("xudfs", "xxStrip", Array(text, pattern))
        Exit Function
    #End If
failed:
    xxStrip = Err.Description
End Function

Function xxToNumber(text, Optional to_int)
Attribute xxToNumber.VB_Description = "返回去除首尾指定字符的字符串，默认去除首位全角空格、半角空格及换行"
Attribute xxToNumber.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxToNumber = Py.CallUDF("xudfs", "xxToNumber", Array(text, to_int), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxToNumber = Py.CallUDF("xudfs", "xxToNumber", Array(text, to_int))
        Exit Function
    #End If
failed:
    xxToNumber = Err.Description
End Function

Function xxToText(number_, Optional is_int)
Attribute xxToText.VB_Description = "返回去除首尾指定字符的字符串，默认去除首位全角空格、半角空格及换行"
Attribute xxToText.VB_ProcData.VB_Invoke_Func = " \n22"
    #If App = "Microsoft Excel" Then
        If TypeOf Application.Caller Is Range Then On Error GoTo failed
        xxToText = Py.CallUDF("xudfs", "xxToText", Array(number_, is_int), ThisWorkbook, Application.Caller)
        Exit Function
    #Else
        xxToText = Py.CallUDF("xudfs", "xxToText", Array(number_, is_int))
        Exit Function
    #End If
failed:
    xxToText = Err.Description
End Function

