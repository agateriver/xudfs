    # —*- coding: utf8 -*-

#### NOTE: Don't use VBA keywords for functions' arguments

# from typing import Set
# from ordered_set import OrderedSet as set
import xlwings as xw
import pandas as pd
import numpy as np
import re

# 转换为文本
@xw.func
@xw.arg("number_", doc="To be converted value")
@xw.arg("is_int", doc="value is integer")
def xxToText(number_,is_int=True):  
    """返回去除首尾指定字符的字符串，默认去除首位全角空格、半角空格及换行"""
    if not isinstance(number_, str) :
        if is_int:
            return str(int(number_))
        else:
            return str(number_)
    else:
        return number_

# 转换为数值
@xw.func
@xw.arg("string_", doc="To be converted string")
@xw.arg("to_int", doc="convert to integer")
def xxToNumber(string_,to_int=True):  
    """返回去除首尾指定字符的字符串，默认去除首位全角空格、半角空格及换行"""
    if to_int:
        return int(string_)
    else:
        return float(string_)

# 默认去除首位全角和半角空格及换行
@xw.func
@xw.arg("string_", doc="To be stripped string")
@xw.arg(
    "pattern",
    doc="Regex for pattern, default is '　  \r\n' (0x3000,0x0020,0x00A0,\r,\n)")
def xxStrip(string_, pattern="　  \r\n"):  # 三种空格(0x3000,0x0020,0x00A0)、换行
    """返回去除首尾指定字符的字符串，默认去除首位全角空格、半角空格及换行"""
    if isinstance(string_, str) and string_:
        return str.strip(string_, pattern)
    else:
        return string_


# 返回起始范围内的字串
@xw.func
@xw.arg("string_", doc="To be sliced string")
@xw.arg("start_", doc="index for starting, default=''")
@xw.arg("end_", doc="index for endding, default=''")
def xxSlice(string_, start_="", end_=""):
    """返回起始范围内的字串"""
    if isinstance(string_, str) and string_:
        if start_ == '' and end_ == '':
            return string_
        elif end_ == '':
            return string_[int(start_):]
        elif start_ == '':
            return string_[:int(end_)]
        else:
            return string_[int(start_):int(end_)]
    else:
        return string_


# 用正则表达式替换字符串
@xw.func
@xw.arg("string_", doc="To be replaced string")
@xw.arg("pattern", doc="Regex for pattern")
@xw.arg("repl", doc="Replacement string")
def xxRegexSub(string_, pattern, repl):
    """用正则表达式替换字符串"""
    if string_ and isinstance(string_, str):
        return re.sub(pattern, repl, string_, re.MULTILINE | re.DOTALL)
    else:
        return string_


# 用正则表达式分割字符串，结果横向显示
@xw.func
@xw.arg("string_", doc="To be replaced string")
@xw.arg("pattern", doc="Regex for pattern")
@xw.ret(expand='table')
def xxRegexSplitH(string_, pattern):
    """用正则表达式分割字符串，结果横向显示"""
    if string_ and isinstance(string_, str):
        return re.split(pattern, string_)
    else:
        return string_


# 用正则表达式分割字符串，结果纵向显示
@xw.func
@xw.arg("string_", doc="To be replaced string")
@xw.arg("pattern", doc="Regex for pattern")
@xw.ret(expand='table')
def xxRegexSplitV(string_, pattern):
    """用正则表达式分割字符串，结果纵向显示"""
    if string_ and isinstance(string_, str):
        return [[s] for s in re.split(pattern, string_)]
    else:
        return string_

# 将选定range内的字符串用sep连接起来
@xw.func
@xw.arg("range_", ndim =2 ,doc="Selected Range")
@xw.arg("sep", doc="sep")
def xxJoin(range_, sep=","):
    """将选定range内的字符串用sep连接起来"""
    cells =[cell for row in range_ for cell in row ]
    return  sep.join(cells)



# 提取选定区域的唯一字符串集合
@xw.func
@xw.arg("range1", np.array, ndim=2, doc="Range  To be disctincted")
@xw.ret(expand='table')
def xxDistinct(range1):
    """以列的形式返回单个所选ranges内所有唯一的值"""
    ss = set()
    for range in [
            range1,
    ]:
        for row in range:
            for cell in row:
                ss.add(cell)
    if ss:
        return sorted(list([[s] for s in ss]))
    else:
        return None


@xw.func
@xw.arg("range1", np.array, ndim=2, doc="Range 1 To be disctincted")
@xw.arg("range2", np.array, ndim=2, doc="Range 2 To be disctincted")
@xw.arg("range3", np.array, ndim=2, doc="Range 3 To be disctincted")
@xw.arg("range4", np.array, ndim=2, doc="Range 4 To be disctincted")
@xw.arg("range5", np.array, ndim=2, doc="Range 5 To be disctincted")
@xw.arg("range6", np.array, ndim=2, doc="Range 6 To be disctincted")
@xw.arg("range7", np.array, ndim=2, doc="Range 7 To be disctincted")
@xw.arg("range8", np.array, ndim=2, doc="Range 8 To be disctincted")
@xw.arg("range9", np.array, ndim=2, doc="Range 9 To be disctincted")
@xw.arg("range10", np.array, ndim=2, doc="Range 10 To be disctincted")
@xw.arg("range11", np.array, ndim=2, doc="Range 11 To be disctincted")
@xw.arg("range12", np.array, ndim=2, doc="Range 12 To be disctincted")
@xw.arg("range13", np.array, ndim=2, doc="Range 13 To be disctincted")
@xw.arg("range14", np.array, ndim=2, doc="Range 14 To be disctincted")
@xw.arg("range15", np.array, ndim=2, doc="Range 15 To be disctincted")
@xw.arg("range16", np.array, ndim=2, doc="Range 16 To be disctincted")
@xw.arg("range17", np.array, ndim=2, doc="Range 17 To be disctincted")
@xw.arg("range18", np.array, ndim=2, doc="Range 18 To be disctincted")
@xw.arg("range19", np.array, ndim=2, doc="Range 19 To be disctincted")
@xw.arg("range20", np.array, ndim=2, doc="Range 20 To be disctincted")
@xw.ret(expand='table')
def xxSetUnion(range1,
                range2=None,
                range3=None,
                range4=None,
                range5=None,
                range6=None,
                range7=None,
                range8=None,
                range9=None,
                range10=None,
                range11=None,
                range12=None,
                range13=None,
                range14=None,
                range15=None,
                range16=None,
                range17=None,
                range18=None,
                range19=None,
                range20=None):
    """以列的形式返回最多20个所选ranges内所有唯一值的并集"""
    ranges = [
        rng for rng in [
            range1, range2, range3, range4, range5, range6, range7, range8,
            range9, range10, range11, range12, range13, range14, range15,
            range16, range17, range18, range19, range20
        ] if rng is not None
    ]
    ss = set()
    for range in ranges:
        for row in range:
            for cell in row:
                ss.add(cell)
    if ss:
        return sorted(list([[s] for s in ss]))
    else:
        return None


# Return the difference of two sets as a new set.
@xw.func
@xw.arg("range1_", np.array, ndim=2, doc="Range for Set 1")
@xw.arg("range2_", np.array, ndim=2, doc="Range for Set 2")
@xw.ret(expand='table')
def xxSetDiff(range1_, range2_):
    """以列的形式返回两个所选范围的差集"""
    ss1 = set()
    for row in range1_:
        for cell in row:
            # print(cell)
            ss1.add(cell)
    ss2 = set()
    for row in range2_:
        for cell in row:
            ss2.add(cell)
    set_diff = ss1.difference(ss2)
    if set_diff:
        # return sorted(list([[s] for s in set_diff]))
        return list([[s] for s in set_diff])
    else:
        return None


# Return the symmetric difference of two sets as a new set.
@xw.func
@xw.arg("range1_", np.array, ndim=2, doc="Range for Set 1")
@xw.arg("range2_", np.array, ndim=2, doc="Range for Set 2")
@xw.ret(expand='table')
def xxSetSymDiff(range1_, range2_):
    """以列的形式返回两个所选范围的对称差集"""
    ss1 = set()
    for row in range1_:
        for cell in row:
            # print(cell)
            ss1.add(cell)
    ss2 = set()
    for row in range2_:
        for cell in row:
            ss2.add(cell)
    set_diff = ss1.symmetric_difference(ss2)
    if set_diff:
        return sorted(list([[s] for s in set_diff]))
    else:
        return None


# Return the intersection of two sets as a new set.
@xw.func
@xw.arg("range1_", np.array, ndim=2, doc="Range for Set 1")
@xw.arg("range2_", np.array, ndim=2, doc="Range for Set 2")
@xw.ret(expand='table')
def xxSetIntersect(range1_, range2_):
    """以列的形式返回两个所选范围的交集"""
    ss1 = set()
    for row in range1_:
        for cell in row:
            ss1.add(cell)
    ss2 = set()
    for row in range2_:
        for cell in row:
            ss2.add(cell)
    set_intersect = ss1.intersection(ss2)
    if set_intersect:
        return sorted(list([[s] for s in set_intersect]))
    else:
        return None


# Return the union of sets as a new set.
# @xw.func
# @xw.arg("range1_", np.array, ndim=2, doc="Range for Set 1")
# @xw.arg("range2_", np.array, ndim=2, doc="Range for Set 2")
# @xw.ret(expand='table')
# def xxSetUnion(range1_, range2_):
#     """以列的形式返回两个所选范围的并集"""
#     ss1 = set()
#     for row in range1_:
#         for cell in row:
#             ss1.add(cell)
#     ss2 = set()
#     for row in range2_:
#         for cell in row:
#             ss2.add(cell)
#     set_union = ss1.union(ss2)
#     if set_union:
#         return sorted(list([[s] for s in set_union]))
#     else:
#         return None


# Report whether another set contains this set.
@xw.func
@xw.arg("range1_", np.array, ndim=2, doc="Range for Set 1")
@xw.arg("range2_", np.array, ndim=2, doc="Range for Set 2")
def xxSetIsSubset(range1_, range2_):
    """报告第一个集合是否是第二个集合的子集"""
    ss1 = set()
    for row in range1_:
        for cell in row:
            ss1.add(cell)
    ss2 = set()
    for row in range2_:
        for cell in row:
            ss2.add(cell)
    return ss1.issubset(ss2)


# Report whether this set contains another set.
@xw.func
@xw.arg("range1_", np.array, ndim=2, doc="Range for Set 1")
@xw.arg("range2_", np.array, ndim=2, doc="Range for Set 2")
def xxSetIsSuperSet(range1_, range2_):
    """报告第一个集合是否是第二个集合的超集"""
    ss1 = set()
    for row in range1_:
        for cell in row:
            ss1.add(cell)
    ss2 = set()
    for row in range2_:
        for cell in row:
            ss2.add(cell)
    return ss1.issuperset(ss2)


# Return True if two sets have a null intersection.
@xw.func
@xw.arg("range1_", np.array, ndim=2, doc="Range for Set 1")
@xw.arg("range2_", np.array, ndim=2, doc="Range for Set 2")
def xxSetIsDisjoint(range1_, range2_):
    """报告两个集合是否没有交集"""
    ss1 = set()
    for row in range1_:
        for cell in row:
            ss1.add(cell)
    ss2 = set()
    for row in range2_:
        for cell in row:
            ss2.add(cell)
    return ss1.isdisjoint(ss2)


# # 是否外地手机号
# @xw.func
# @xw.arg("mobile", doc="Mobile Phone Number")
# def xxIsLocalMobile(mobile: str) -> bool:
#     """如外地手机号则前面加0，否则返回原号码"""
#     prefixes = [
#         '1303530', '1303531', '1303532', '1303533', '1304090', '1304091',
#         '1304092', '1304093', '1304094', '1304710', '1304711', '1308510',
#         '1308511', '1309420', '1309421', '1309422', '1309423', '1309424',
#         '1309830', '1309831', '1310079', '1311430', '1311431', '1311717',
#         '1311718', '1311719', '1313575', '1313576', '1313577', '1313578',
#         '1313579', '1314721', '1316560', '1317700', '1317701', '1317702',
#         '1317703', '1317704', '1319747', '1319748', '1319749', '1320727',
#         '1320728', '1320729', '1321716', '1321726', '1321729', '1322762',
#         '1322763', '1322764', '1322765', '1322766', '1322767', '1322768',
#         '1322769', '1323560', '1323561', '1324729', '1325716', '1325721',
#         '1326460', '1326461', '1326462', '1326463', '1326464', '1326465',
#         '1326466', '1326467', '1326468', '1326469', '1327716', '1327730',
#         '1327731', '1327732', '1327733', '1327734', '1327735', '1327736',
#         '1327737', '1327738', '1329420', '1329711', '1330721', '1330861',
#         '1331058', '1331059', '1331721', '1331722', '1331758', '1332976',
#         '1332977', '1333973', '1333974', '1334350', '1334351', '1334973',
#         '1334974', '1334975', '1336716', '1337790', '1338718', '1338719',
#         '1338720', '1338768', '1339600', '1339721', '1339722', '1343720',
#         '1343721', '1343722', '1343723', '1343724', '1344172', '1344837',
#         '1344838', '1345122', '1345123', '1347696', '1347697', '1347698',
#         '1347699', '1347780', '1347781', '1347782', '1350721', '1350725',
#         '1350726', '1350861', '1350862', '1354541', '1354542', '1354562',
#         '1354563', '1354564', '1354565', '1354566', '1354567', '1354568',
#         '1354569', '1354578', '1354579', '1354580', '1354581', '1354582',
#         '1354592', '1355455', '1355456', '1355457', '1355458', '1355459',
#         '1355460', '1355461', '1359380', '1359381', '1359382', '1359383',
#         '1359384', '1359385', '1359386', '1359387', '1359388', '1359389',
#         '1360721', '1361716', '1361725', '1361726', '1362716', '1362717',
#         '1364715', '1364716', '1364719', '1364725', '1365716', '1366906',
#         '1367716', '1367718', '1367720', '1367722', '1368715', '1368716',
#         '1369715', '1369716', '1369717', '1369719', '1369723', '1369724',
#         '1369725', '1369726', '1369730', '1369731', '1370721', '1379726',
#         '1379727', '1379728', '1379729', '1379730', '1379731', '1379732',
#         '1379733', '1379734', '1379735', '1379736', '1379737', '1379738',
#         '1379739', '1379740', '1379741', '1379742', '1379743', '1379744',
#         '1379745', '1379746', '1379747', '1379748', '1379749', '1379750',
#         '1379751', '1379752', '1379753', '1379754', '1379755', '1380721',
#         '1387220', '1387221', '1387222', '1387223', '1387224', '1387225',
#         '1387226', '1387227', '1387228', '1387229', '1387230', '1387231',
#         '1387232', '1387233', '1387234', '1387235', '1387236', '1387237',
#         '1387238', '1387239', '1387240', '1387241', '1387242', '1387243',
#         '1387244', '1388655', '1388656', '1388657', '1388658', '1388659',
#         '1388660', '1388661', '1388662', '1388663', '1388664', '1390721',
#         '1390861', '1397210', '1397211', '1397212', '1397213', '1397214',
#         '1397215', '1397216', '1397230', '1397231', '1397232', '1397233',
#         '1397234', '1397235', '1397236', '1397237', '1397238', '1397239',
#         '1398664', '1398665', '1398666', '1398667', '1398668', '1398669',
#         '1398670', '1398671', '1398672', '1398673', '1399755', '1399756',
#         '1399757', '1399758', '1399759', '1399760', '1399761', '1399762',
#         '1399763', '1399764', '1452716', '1452721', '1454487', '1454900',
#         '1454901', '1454902', '1454903', '1454904', '1454905', '1457385',
#         '1457386', '1458650', '1458651', '1458652', '1458653', '1470721',
#         '1477104', '1477105', '1477191', '1477192', '1477193', '1477194',
#         '1500721', '1502700', '1502701', '1502702', '1502703', '1502704',
#         '1502705', '1502706', '1502707', '1502708', '1502709', '1502710',
#         '1502711', '1502712', '1502713', '1502714', '1502715', '1502716',
#         '1502717', '1509070', '1509071', '1509072', '1509073', '1509074',
#         '1509075', '1509076', '1509077', '1509078', '1509079', '1509080',
#         '1509081', '1509082', '1509083', '1509084', '1510721', '1517110',
#         '1517111', '1517112', '1517113', '1517114', '1517115', '1517116',
#         '1517117', '1517118', '1517119', '1517120', '1520721', '1527172',
#         '1527173', '1527230', '1527231', '1527232', '1527233', '1527234',
#         '1527235', '1527236', '1527237', '1527238', '1527239', '1527240',
#         '1527241', '1527242', '1527243', '1527244', '1527245', '1527246',
#         '1527247', '1527248', '1527249', '1527250', '1527251', '1527252',
#         '1527253', '1527254', '1527255', '1527256', '1527257', '1527258',
#         '1527259', '1527260', '1527261', '1527262', '1527263', '1527264',
#         '1530721', '1530861', '1532768', '1532769', '1532776', '1532777',
#         '1532778', '1532779', '1533415', '1533416', '1533417', '1533587',
#         '1534296', '1534298', '1534299', '1534724', '1534725', '1534726',
#         '1539273', '1539274', '1539275', '1539276', '1550713', '1550714',
#         '1550715', '1550716', '1550721', '1554900', '1554901', '1554902',
#         '1554903', '1557144', '1557145', '1557146', '1557147', '1557160',
#         '1557161', '1557162', '1557163', '1557164', '1557165', '1557166',
#         '1557167', '1557168', '1557169', '1557200', '1557201', '1557202',
#         '1557203', '1557204', '1557205', '1557206', '1557207', '1557208',
#         '1557209', '1557210', '1557211', '1557212', '1557213', '1557214',
#         '1557215', '1557216', '1557217', '1557218', '1557219', '1558600',
#         '1558601', '1558602', '1558603', '1558604', '1558605', '1558606',
#         '1558607', '1558608', '1558609', '1558610', '1558611', '1558647',
#         '1558648', '1560721', '1560861', '1562944', '1562945', '1562946',
#         '1562980', '1562981', '1562982', '1562983', '1562984', '1562985',
#         '1562986', '1562987', '1562988', '1567135', '1567136', '1567137',
#         '1567138', '1567139', '1567140', '1567141', '1567142', '1567143',
#         '1567144', '1567145', '1567146', '1567147', '1567214', '1567240',
#         '1567241', '1567242', '1567243', '1567259', '1569721', '1571721',
#         '1571783', '1571784', '1572716', '1572721', '1572723', '1577114',
#         '1577115', '1579724', '1579725', '1579728', '1579742', '1579743',
#         '1580721', '1582650', '1582651', '1582652', '1582653', '1582654',
#         '1582655', '1582656', '1582657', '1582658', '1582659', '1582660',
#         '1582661', '1582662', '1582663', '1582664', '1582665', '1582770',
#         '1582771', '1582772', '1582773', '1582774', '1582775', '1582776',
#         '1582777', '1582778', '1582779', '1587209', '1587210', '1587211',
#         '1587212', '1587213', '1587214', '1587215', '1590721', '1592650',
#         '1592651', '1592652', '1592653', '1592654', '1592655', '1592656',
#         '1592657', '1592658', '1592659', '1592660', '1592661', '1592662',
#         '1592663', '1592664', '1592770', '1592771', '1592772', '1592773',
#         '1592774', '1592775', '1592776', '1592777', '1592778', '1592779',
#         '1592780', '1592781', '1592782', '1592783', '1592784', '1592785',
#         '1592786', '1592787', '1592788', '1592789', '1592790', '1592791',
#         '1592792', '1592793', '1592794', '1592795', '1592796', '1592797',
#         '1592798', '1592799', '1597158', '1597159', '1597160', '1597161',
#         '1597273', '1597274', '1597275', '1621716', '1627104', '1627105',
#         '1650716', '1651716', '1652716', '1655261', '1655985', '1660721',
#         '1660861', '1660961', '1661271', '1667160', '1667161', '1667162',
#         '1667163', '1667164', '1667165', '1667166', '1667167', '1667168',
#         '1667169', '1671716', '1672716', '1673716', '1673729', '1700716',
#         '1700717', '1700718', '1700719', '1701522', '1701523', '1701524',
#         '1701525', '1701526', '1713716', '1715716', '1716716', '1717716',
#         '1717719', '1717720', '1717721', '1717723', '1717725', '1726174',
#         '1728210', '1728211', '1728212', '1728213', '1728246', '1728247',
#         '1737163', '1737164', '1737165', '1750721', '1750861', '1757165',
#         '1757166', '1757167', '1757168', '1757169', '1760721', '1767220',
#         '1767221', '1767222', '1767223', '1768372', '1768373', '1768374',
#         '1768399', '1770716', '1772035', '1772036', '1772037', '1772038',
#         '1774060', '1774061', '1776281', '1776282', '1776283', '1776284',
#         '1776285', '1776286', '1776305', '1776306', '1776307', '1776308',
#         '1776309', '1776414', '1776423', '1777161', '1777162', '1777163',
#         '1777164', '1778633', '1778634', '1778666', '1778667', '1779834',
#         '1779835', '1780273', '1780274', '1780717', '1784783', '1786637',
#         '1787107', '1787137', '1787146', '1787181', '1788685', '1789716',
#         '1800721', '1804063', '1806234', '1806235', '1806236', '1806295',
#         '1806296', '1806297', '1806421', '1806422', '1807127', '1807128',
#         '1807129', '1807149', '1807188', '1807189', '1808618', '1808619',
#         '1808620', '1808635', '1808636', '1810716', '1812034', '1812050',
#         '1816238', '1816313', '1816314', '1816315', '1816418', '1817182',
#         '1817183', '1817184', '1817185', '1817197', '1817198', '1817199',
#         '1818655', '1818656', '1818657', '1818696', '1820721', '1827100',
#         '1827101', '1827102', '1827103', '1827104', '1827105', '1827106',
#         '1827107', '1827108', '1827220', '1827221', '1827222', '1827223',
#         '1827224', '1827243', '1830716', '1830725', '1830726', '1830727',
#         '1832790', '1832791', '1832792', '1832793', '1832794', '1832795',
#         '1832796', '1832797', '1832798', '1832799', '1837160', '1837161',
#         '1837162', '1837163', '1837164', '1837165', '1837166', '1837167',
#         '1837168', '1837169', '1837290', '1837291', '1837292', '1837293',
#         '1837294', '1837295', '1837296', '1837297', '1840716', '1842716',
#         '1847126', '1847127', '1847134', '1847145', '1847146', '1847159',
#         '1847182', '1847183', '1847216', '1850721', '1850861', '1852711',
#         '1852712', '1852732', '1857136', '1857137', '1857138', '1857139',
#         '1857140', '1857207', '1857208', '1857209', '1857210', '1857260',
#         '1857261', '1857262', '1857263', '1857264', '1857293', '1857294',
#         '1860721', '1860861', '1862720', '1862721', '1862722', '1862723',
#         '1862724', '1862725', '1862726', '1862727', '1862728', '1862729',
#         '1867164', '1867168', '1867211', '1867212', '1867255', '1867256',
#         '1867257', '1867415', '1867416', '1869608', '1869645', '1869646',
#         '1870721', '1872738', '1872739', '1872740', '1872741', '1872742',
#         '1872743', '1872744', '1877200', '1877201', '1877202', '1877214',
#         '1877215', '1877216', '1877217', '1877256', '1877257', '1877258',
#         '1877259', '1877260', '1877261', '1877262', '1877263', '1877264',
#         '1877265', '1877266', '1877267', '1877268', '1877269', '1880721',
#         '1880861', '1882710', '1882711', '1882712', '1882713', '1882714',
#         '1882715', '1882716', '1882745', '1887160', '1887161', '1887162',
#         '1887163', '1887164', '1887165', '1887166', '1887167', '1887168',
#         '1887169', '1887189', '1887229', '1887249', '1887293', '1887294',
#         '1887295', '1887296', '1887297', '1890721', '1890861', '1894297',
#         '1894298', '1897210', '1897211', '1897212', '1897213', '1897214',
#         '1897215', '1897216', '1897230', '1897231', '1897232', '1897233',
#         '1897234', '1897235', '1897236', '1897237', '1897238', '1897239',
#         '1898664', '1898665', '1898666', '1898667', '1898668', '1898669',
#         '1898670', '1898671', '1898672', '1898673', '1899583', '1899584',
#         '1899585', '1899586', '1910860', '1910861', '1916400', '1916401',
#         '1916402', '1916403', '1916404', '1916405', '1916406', '1916407',
#         '1916408', '1916409', '1917180', '1917181', '1917182', '1917183',
#         '1917184', '1917185', '1917186', '1917187', '1917188', '1917189',
#         '1917246', '1917247', '1918600', '1918601', '1918602', '1918603',
#         '1918604', '1918605', '1918606', '1918607', '1918608', '1918609',
#         '1950716', '1953052', '1954697', '1954698', '1954699', '1956670',
#         '1956671', '1956672', '1956673', '1956674', '1957153', '1957154',
#         '1957155', '1957156', '1957157', '1960721', '1967102', '1981374',
#         '1987149', '1987184', '1987185', '1987187', '1987188', '1987234',
#         '1987235', '1987236', '1988845', '1988846', '1988847', '1990721',
#         '1990861', '1994517', '1994518', '1994777', '1994778', '1994779',
#         '1994780', '1994781', '1997128', '1997129', '1997130', '1997131',
#         '1997132', '1997133', '1997134', '1997135', '1997136', '1997137',
#         '1997138', '1997139', '1997247', '1997248', '1997249', '1997260',
#         '1997261', '1997262', '1997263', '1997264', '1997265', '1997266',
#         '1997267', '1997268', '1997269', '1997281', '1998675', '1998676',
#         '1998677', '1998678', '1998679'
#     ]
#     s_mobile = str(mobile)
#     if any([s_mobile.startswith(prefix) for prefix in prefixes]):
#         return True
#     else:
#         return False


# # 外地手机号前加0
# @xw.func
# @xw.arg("mobile", doc="Mobile Phone Num")
# def xxRemoteMobile(mobile: str) -> str:
#     """外地手机号则前面加0"""
#     if xxIsLocalMobile(mobile):
#         return mobile
#     else:
#         return "0" + mobile


if __name__ == "__main__":
    xw.serve()
